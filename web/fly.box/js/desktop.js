!!function () { var $ = fly; window.indexPath = "../"; $.box.Desktop = $.Class({ constructor: function () { this.init(); this.createMembers() }, show: function () { this.bindEvents(); this.loadUserData() }, init: function () { }, createMembers: function () { this.appsBox = $("#apps-box"); this.taskBar = $("#task-bar"); this.startMenuBtn = $("#start-menu-btn"); this.toggleDesktopBtn = $("#toggle-desktop-btn") }, bindEvents: function () { $.doc.on("sizechange", function () { desktop.applyLayout() }); this.appsBox.click(this.onAppsBoxClick, this); this.appsBox.contextmenu(this.onAppsBoxRightClick, this); this.appsBox.dblclick(this.onAppsBoxDblClick, this); this.startMenuBtn.click(this.showStartMenu, this); this.taskBar.click(this.onTaskBarClick, this); this.taskBar.contextmenu(this.onTaskBarRightClick, this); this.toggleDesktopBtn.mouseover(this.onToggleDesktopBtn, this); this.toggleDesktopBtn.mouseout(this.onToggleDesktopBtn, this); this.toggleDesktopBtn.click(this.onToggleDesktopBtn, this); $.doc.contextmenu(function () { $.Event.stop(true) }) }, onToggleDesktopBtn: function () { var C = false, A = $event.type, B = this.allDigHideBy; if (this.allDlgHided) { if (A == "click" && B == "click") C = true; else if (A == "mouseout" && B == "mouseover") C = true; else if (A == "mouseover") return; else if (A == "click" && B == "mouseover") { this.allDigHideBy = "click"; return } else if (A == "mouseout" && B == "click") return; this.allDlgHided = false } else { if (A == "mouseover") this.allDigHideBy = "mouseover"; else if (A == "mouseout") return; this.allDlgHided = true } for (var $ in art.dialog.list) { var _ = art.dialog.list[$]; if (C && _.hideByAll) { _.show(); _.hideByAll = false } else if (!C && !_.isHided()) { _.hide(); _.hideByAll = true } } }, activeDialog: function (A) { var _ = A.DOM.wrap[0], B = $.DomHelper.isShow(_); if (art.dialog.focus && art.dialog.focus.DOM == A.DOM && B) { A.hide(); art.dialog.focus = null } else { if (!B) A.show(); A.hideByAll = false; this.allDlgHided = false; A.zIndex() } }, createTaskItemMenu: function () { if (this.taskItemMenu) return; var _ = $("#task-item-menu")[0]; this.taskItemMenu = new $.ui.Menu({ el: _, container: _ }) }, showTaskItemMenu: function (A) { this.createTaskItemMenu(); this.taskItemMenu.show(); var _ = this.taskItemMenu.el, C = $(A).rect(), B = _.rect(); _.css({ left: C.left, top: C.top - B.height - 3 }); $.Event.stop(true); return false }, createAppItemMenu: function () { if (this.appItemMenu) return; var _ = $("#app-icon-menu")[0]; this.appItemMenu = new $.ui.Menu({ el: _, container: _ }) }, showAppItemMenu: function (B, _, C) { this.createAppItemMenu(); this.appItemMenu.show("mouse"); var A = this.apps[C]; this.appItemMenu.withPos && this.appItemMenu.el.removeClass("with-" + this.appItemMenu.withPos); this.appItemMenu.el.addClass("with-" + _); this.appItemMenu.el.removeClass("with-ex-" + this.appItemMenu.withEx); this.appItemMenu.withEx = A ? A.ex : ""; this.appItemMenu.el.addClass("with-ex-" + this.appItemMenu.withEx); this.appItemMenu.withPos = _; this.appItemMenu.withAppId = C; $.Event.stop(true); return false }, onTaskBarRightClick: function (_, B) { var A = $(B.target).closest(".task-item"); if (A[0]) { this.showTaskItemMenu(A[0]); this.contextMenuWithDialogId = A.attr("dialogId") } }, onTaskBarClick: function (_, B) { var A = $(B.target).closest(".task-item"); if (A[0]) { var C = art.dialog.get(A.attr("dialogId")); this.activeDialog(C) } }, selectApp: function (_) { var $ = this.apps[_.attr("appId")]; if (this.selectedApp) { if (this.selectedApp == $) return; this.selectedApp.select(false) } $.select(true); this.selectedApp = $ }, onAppsBoxClick: function (_, A) { var B = $(A.target).closest(".app-item"); if (B[0]) this.selectApp(B); else { this.selectedApp && this.selectedApp.select(false); this.selectedApp = null } }, onStartMenuBoxRightClick: function (_, A) { var B = $(A.target).closest("li"); if (B[0]) this.showAppItemMenu(B[0], "start-menu", B.attr("appId")) }, onAppsBoxRightClick: function (_, A) { var B = $(A.target).closest(".app-item"); if (B[0]) { this.selectApp(B); this.showAppItemMenu(B[0], "desktop-item", B.attr("appId")) } else this.showAppItemMenu(B[0], "desktop", B.attr("appId")) }, onAppsBoxDblClick: function (A, B) { var C = $(B.target).closest(".app-item"); if (C[0]) { var _ = this.apps[C.attr("appId")]; this.openApp(_) } }, taskItemFormat: '<div id="task-{0}" dialogId="{0}" appId="{id}" class="task-item" >{@if o.icon}<img src="{icon}"/>{if@}<span>{o.shortName||o.name}</span></div>', addDialogToTaskBar: function (A) { if (!A) return; var _ = $("#task-" + A.id); if (!_[0]) { _ = $(this.taskItemFormat.format(A.id, this.apps[A.appId])); this.taskBar.append(_) } this.onDialogFocus(A) }, openApp: function (_) { this.hideStartMenu(); if ($.isString(_)) _ = this.apps[_]; if (_.openType == "new-page") { window.open(_.url, "_blank"); return } var B = { close: function () { desktop.onAppClose(this) } }; this.allDlgHided = false; var A = openApp(_, B); if (!this.apps[_.id]) this.apps[_.id] = _; this.addDialogToTaskBar(A) }, onAppClose: function (_) { $("#task-" + _.id).remove() }, onDialogFocus: function (_) { this.taskBar.$("> .task-item-focus").removeClass("task-item-focus"); $("#task-" + _.id).addClass("task-item-focus") }, loadUserData: function () { $.post($.box.ajaxUrl("OnlineApp", "GetDesktopData"), function (result) { desktop.userData = result.data; if (desktop.userData.setting); else desktop.userData.setting = { background: null, desktopApps: [], startMenuApps: [] }; desktop.userData.apps = desktop.userData.apps.select(function () { var app = eval("(" + this.content + ")"); $.extendIf(app, this); app.width = parseInt(app.width); app.height = parseInt(app.height); if (!app.icon && app.ex == "oapp") if (app.openType == "new-page") app.icon = "../themes/imgs/file/32/url.gif"; else app.icon = "../themes/imgs/desktop/app-icons/unknown.png"; return app }); desktop.userData.background = eval("(" + desktop.userData.background + ")"); desktop.showDesktop() }) }, applyLayout: function () { var C = 115, B = 100, A = Math.floor(($.getBody().rect().height - 30) / C); if (this.rowCount == A) return; var D = 0, _ = 0; this.userData.setting.desktopApps.each(function () { var $ = desktop.apps[this]; if (D >= A) { D = 0; _++ } $.el.css({ top: D * C + 10, left: _ * B + 10 }); D++ }) }, showBackground: function () { if (location.href.indexOf("debug") > -1) return; if (!this.userData.background) this.userData.background = "../themes/imgs/desktop/1.jpg"; $.getBody().css("background-image", "url({0})".format(this.userData.background)) }, showDesktop: function () { this.showBackground(); this.showApps() }, apps: [], showApps: function () { this.apps = []; desktop.appsBox.empty(); this.userData.apps.each(function () { var _ = new $.box.Desktop.App(this); desktop.apps.push(_); _.createEl(); desktop.apps[this.id] = _ }); this.userData.setting.desktopApps = this.userData.setting.desktopApps.where(function () { var $ = desktop.apps[this]; if ($) { desktop.appsBox.append($.el); return true } else return false }); this.apps.myComputer = new $.box.Desktop.App({ id: "myComputer", name: "\u7f51\u76d8", ex: "oapp", icon: "../themes/imgs/desktop/app-icons/app.png", url: "../index.htm", width: 900, height: 550 }); this.apps.appStore = new $.box.Desktop.App({ id: "appStore", name: "\u5e94\u7528\u5e02\u573a", ex: "oapp", icon: "../themes/imgs/desktop/app-icons/app_s2.png", url: "../common/form.htm?m=file/online-app&in-dialog=1&form=store", width: 800, height: 500 }); this.apps.addApp = new $.box.Desktop.App({ id: "addApp", name: "\u6dfb\u52a0\u5e94\u7528", ex: "oapp", icon: "../themes/imgs/desktop/app-icons/app_s2.png", url: "../common/form.htm?m=file/online-app&in-dialog=1&parentId=" + this.userData.desktopDirId, width: 450, height: 400 }); this.applyLayout(); if (this.startMenu) { this.startMenu.leftBlock.empty(); this.userData.setting.startMenuApps.each(function () { desktop.addAppToMenu(desktop.apps[this], desktop.startMenu.leftBlock) }) } }, startMenuFormat: '<div id=start-menu unselectable="on" class="unselectable" ><div id=start-menu-back ></div><div id=start-menu-head onclick=desktop.onStartMenuHeadClick() ><img src0="../themes/imgs/icons/logo-icon.png"/></div><div id=start-menu-left ><ul></ul></div><div id=start-menu-right ><ul></ul></div><div id=start-menu-sys-buttons ><a onclick=desktop.logout() >\u6ce8\u9500</a></div></div>', menuItemFormat: '<li id="start-menu-item-{id}" onclick="desktop.openApp(desktop.apps[this.getAttribute(\'appId\')]);desktop.startMenu.hide()" appId="{id}"><img src="{icon}"/><a class=start-menu-item-name >{shortName}</a></li>', createStartMenu: function () { if (this.startMenu) return; this.startMenu = $(this.startMenuFormat); this.startMenu.appendTo($.getBody()); this.startMenuHeadIcon = $("#start-menu-head img"); this.startMenuHeadIcon[0].src = indexPath + "do/Icon.ashx?u-id=" + desktop.userData.user.id; this.startMenu.leftBlock = $("#start-menu-left ul"); this.startMenu.rightBlock = $("#start-menu-right ul"); this.startMenu.on("out_click", function ($, _) { if (_.target != desktop.startMenuBtn[0] && _.target.parentNode != desktop.startMenuBtn[0]) desktop.hideStartMenu() }); this.startMenu.leftBlock.contextmenu(this.onStartMenuBoxRightClick, this); this.userData.setting.startMenuApps.each(function () { desktop.addAppToMenu(desktop.apps[this], desktop.startMenu.leftBlock) }); this.addAppToMenu([desktop.apps.myComputer, desktop.apps.appStore, desktop.apps.addApp], this.startMenu.rightBlock) }, hideStartMenu: function () { this.startMenu && this.startMenu.hide() }, onStartMenuHeadClick: function () { this.openApp({ id: "user-setting", ex: "oapp", name: "\u4e2a\u4eba\u8bbe\u7f6e", width: 800, height: 550, url: indexPath + "setting/personal.htm" }) }, addAppToMenu: function (A, _, B) { $.toArray(A).each(function () { if (!this) return; _[B == "top" ? "prepend" : "append"](desktop.menuItemFormat.format(this)) }) }, showStartMenu: function () { this.createStartMenu(); clearTimeout(this.startMenu.showHandler); if ($.DomHelper.isShow(this.startMenu[0])) this.startMenu.hide(); else this.startMenu.show() }, addToStartMenu: function () { var _ = this.apps[this.appItemMenu.withAppId]; $.post($.box.ajaxUrl("OnlineApp", "AppendTo"), { appId: _.id, pos: "start-menu" }, function (A) { A.msg && alert(A.msg); if (A.success) { $("#start-menu-item-" + _.id).remove(); desktop.startMenu && desktop.addAppToMenu(_, desktop.startMenu.leftBlock, "top"); $.common.showMessage("\u5df2\u6dfb\u52a0\u5230\u5f00\u59cb\u83dc\u5355\u3002") } }) }, addToStartMenuByTask: function () { }, addToStartMenuByIcon: function () { }, renameApp: function () { var _ = this.apps[this.appItemMenu.withAppId]; art.dialog.prompt("\u91cd\u547d\u540d", function (A) { $.post($.box.ajaxUrl("OnlineApp", "RenameApp"), { appId: _.id, newName: A }, function (B) { B.msg && alert(B.msg); if (B.success) { _.shortName = A; _.name = A + ".oApp"; $("#start-menu-item-{0} .start-menu-item-name".format(_.id)).text(A); $("#desktop-item-{0} .desktop-item-name".format(_.id)).text(A) } }) }, _.shortName) }, removeApp: function () { var A = this.appItemMenu.withPos, _ = this.appItemMenu.withAppId; $.post($.box.ajaxUrl("OnlineApp", "RemoveApp"), { appId: _, pos: A }, function (B) { B.msg && alert(B.msg); if (B.success) if (A == "start-menu") { desktop.userData.setting.startMenuApps.remove('o=>o.id=="{0}"'.format(_)); $("#start-menu-item-" + _).remove() } else if (A == "desktop-item") { var C = desktop.userData.setting.desktopApps; C.remove(C.indexOf(_)); $("#desktop-item-" + _).remove(); desktop.applyLayout() } }) }, closeOther: function () { for (var $ in art.dialog.list) if ($ != desktop.contextMenuWithDialogId) art.dialog.list[$].close() }, closeThis: function () { art.dialog.get(this.contextMenuWithDialogId).close() }, openThis: function () { var $ = this.apps[this.appItemMenu.withAppId]; this.openApp($) }, logout: function () { $.post($.box.ajaxUrl("sys", "logout"), function (_) { if (_.success) window.open(_.data || $.box.getLoginUrl(), "_top"); else $.alert(_.msg) }) }, editApp: function () { var $ = this.apps[this.appItemMenu.withAppId], _ = { id: "edit-online-app", name: "\u4fee\u6539\u5e94\u7528", ex: "oapp", icon: "../themes/imgs/desktop/app-icons/app_s2.png", url: "../common/form.htm?m=file/online-app&in-dialog=1&parentId=d0028222-3b65-4d2a-b728-3c6696fd7db5&id=" + $.id, width: 450, height: 350 }; this.openApp(_) } }); $.box.Desktop.App = $.Class({ constructor: function (_) { $.extend(this, _); this.shortName || (this.shortName = $.getNameWithoutEx(this.name)) }, elFormat: '<div id="desktop-item-{id}" appId="{id}" class="app-item  ex-{ex} app-{id}" ><a class="app-item-back" ></a><div class="app-item-icon node-icon"></div><label class=app-item-label ><a class=desktop-item-name >{shortName}</a></label></div>', createEl: function () { this.el = $(this.elFormat.format(this)); if (this.icon) $.Style.createSheet(".app-{id} .app-item-icon{{background-image:url({icon})}}".format(this)) }, select: function ($) { if ($ !== false) this.el.addClass("selected"); else this.el.removeClass("selected") } }); window.closeDialog = function (A) { for (var $ in art.dialog.list) { var _ = art.dialog.list[$]; if (_.iframe == A) { _.close(); return true } } }; artDialog.prototype.zIndex = artDialog.prototype.zIndex.after(function () { desktop.onDialogFocus(this); return this }); artDialog.prototype.isHided = function () { return !fly.DomHelper.isShow(this.DOM.wrap[0]) }; window.desktop = $.box.createPage(function () { return new fly.box.Desktop() }); desktop.show() } ()