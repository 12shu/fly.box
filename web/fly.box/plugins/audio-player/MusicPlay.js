function _MusicPlay() { this.player = null } _MusicPlay.prototype = { create: function (_, B) { var A = '<object id="Player-' + _ + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,29,0" width="0" height="0">' + '\n<param name="movie" value="' + B + '" />' + '\n<param name="quality" value="high" />' + '\n<param name="allowScriptAccess" value="always" />' + '\n<embed name="Player-' + _ + '" allowScriptAccess="always" src="' + B + '" quality="high" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" width="0" height="0"></embed>' + "\n</object>", $ = document.getElementById(_); $.style.width = 0; $.style.height = 0; $.style.overflow = "hidden"; $.innerHTML = A; this.player = window.document["Player-" + _] || document.getElementById("Player-" + _); this.playerUI.init() }, play: function ($) { this.player.jsPlay($) }, stop: function () { this.player.jsStop() }, pause: function () { this.player.jsPause() }, rePlay: function () { this.player.jsRePlay() }, jumpPlay: function ($) { this.player.jsJumpPlay($) }, setVolume: function ($) { this.player.jsSetVolume($) }, each: function (A, C, _) { if (_) { if (A.length == undefined) for (var D in A) C.apply(A, _); else for (var D = 0, B = A.length; D < B; D++) if (C.apply(A, _) === false) break } else if (A.length == undefined) for (D in A) C.call(A, D, A); else for (var D = 0, B = A.length, $ = A[0]; D < B && C.call($, D, $) !== false; $ = A[++D]); return A }, playerUI: { init: function () { this.musicList = this.$("MusicList"); this.mp3List = this.musicList.getElementsByTagName("li"); this.mp3 = this.musicList.getElementsByTagName("textarea"); this.LoadProgressBar = this.$("LoadProgressBar"); this.PlayProgressBar = this.$("PlayProgressBar"); this.CurrentPlay = this.$("CurrentPlay"); this.CurTime = this.$("CurTime"); this.TotalTime = this.$("TotalTime"); this.CurSound = this.$("CurSound"); this.CurSoundBar = this.$("CurSoundBar"); this.PrevBtn = this.$("PrevBtn"); this.NextBtn = this.$("NextBtn"); this.PlayBtn = this.$("PlayBtn"); this.DownLoadBtn = this.$("DownLoadBtn"); this.MusicListScroll = this.$("MusicList").getElementsByTagName("ul")[0]; this.ListScrollBar = this.$("ListScrollBar"); this.timeObj = null; this.curIndex = -1; this.total = this.mp3List.length; this.dragStart = false; this.mp3ListEvent(); this.dragPlayEvent(); this.dragVolumeEvent(); this.playBtnEvent(); this.musicListScrollEvent() }, $: function ($) { return document.getElementById($) }, mp3ListEvent: function () { var _ = MusicPlay, $ = this; _.each(this.mp3List, function (_) { this.onclick = function (B) { B = window.event || B; var A = B.target || B.srcElement; if (A && A.nodeName == "A") return; $.curIndex = _; $.uiPlayer() } }) }, uiPlayer: function (A) { MusicPlay.each(this.mp3List, function () { this.className = "" }); var C = this.mp3[this.curIndex].value; this.mp3List[this.curIndex].className = "cur"; top.document.title = parent.document.getElementById("doc-title").innerHTML = this.mp3List[this.curIndex].getAttribute("name"); MusicPlay.play(C); parent.document.getElementById("a-down").href = C.replace("../../", "../"); this.DownLoadBtn.setAttribute("href", C); this.PlayBtn.setAttribute("title", "\u6682\u505c"); this.PlayBtn.className = "play"; var _ = this.mp3[this.curIndex].parentNode, $ = _.parentNode; while (_.offsetTop - $.parentNode.offsetHeight + 80 > -$.offsetTop) { var B = this.ListScrollBar.offsetTop + 10; this.ListScrollBar.style.top = B + "px"; this.ListScrollBar.onDrag(0, B) } while (_.offsetTop - 80 < -$.offsetTop && this.ListScrollBar.offsetTop > 10) { B = this.ListScrollBar.offsetTop - 10; this.ListScrollBar.style.top = B + "px"; this.ListScrollBar.onDrag(0, B) } }, uiProgress: function ($) { this.LoadProgressBar.style.width = 200 * $.loadedBytes / $.totalBytes + "px" }, uiPlaying: function (_) { this.timeObj = _; var $ = Math.round(200 * _.curTime / _.timeLength); if (!this.dragStart) { this.PlayProgressBar.style.width = $ + "px"; this.CurrentPlay.style.left = ($ - 10) + "px" } this.CurTime.innerHTML = this.uiTimeFormat(_.curTime); this.TotalTime.innerHTML = this.uiTimeFormat(_.timeLength) }, uiPlayEnd: function () { this.uiNext() }, uiPrev: function () { this.curIndex = --this.curIndex < 0 ? this.total - 1 : this.curIndex; this.uiPlayer(true); this.PlayProgressBar.style.width = 0; this.CurrentPlay.style.left = "-10px" }, uiNext: function () { this.curIndex = ++this.curIndex >= this.total ? 0 : this.curIndex; this.uiPlayer(true); this.PlayProgressBar.style.width = 0; this.CurrentPlay.style.left = "-10px" }, dragPlayEvent: function () { Drag.init(this.CurrentPlay, null, -10, 190, -5, -5); var $ = this; this.CurrentPlay.onDragStart = function () { $.dragStart = true }; this.CurrentPlay.onDragEnd = function (B, A) { var _ = parseInt(B) + 10; MusicPlay.jumpPlay($.timeObj.timeLength * _ / 200); $.dragStart = false }; this.CurrentPlay.onDrag = function (B, A) { var _ = parseInt(B) + 10; $.PlayProgressBar.style.width = _ + "px" } }, dragVolumeEvent: function () { Drag.init(this.CurSound, null, -10, 40, -7, -7); var $ = this; this.CurSound.onDrag = function (B, A) { var _ = parseInt(B) + 10; $.CurSoundBar.style.width = _ + "px"; _ /= 50; MusicPlay.setVolume(Math.round(_ / 0.1) * 0.1) } }, playBtnEvent: function () { var $ = this; this.PrevBtn.onclick = function () { if ($.curIndex == -1) $.curIndex = 1; $.uiPrev() }; this.NextBtn.onclick = function () { $.uiNext() }; this.PlayBtn.onclick = function () { if ($.curIndex == -1) $.uiNext(); else if (this.getAttribute("title") == "\u6682\u505c") { this.setAttribute("title", "\u64ad\u653e"); this.className = "pause"; MusicPlay.pause() } else if (this.getAttribute("title") == "\u64ad\u653e") { this.setAttribute("title", "\u6682\u505c"); this.className = "play"; MusicPlay.rePlay() } } }, musicListScrollEvent: function () { var $ = this; Drag.init(this.ListScrollBar, null, 479, 479, 0, 200); this.ListScrollBar.onDrag = function (A, _) { $.MusicListScroll.style.top = -1 * _ / 200 * ($.MusicListScroll.offsetHeight - 300) + "px" }; $.musicList.onmousewheel = function (_) { _ = window.event || _; var A = _.wheelDelta || _.detail * 40; if (A > 0) { var B = $.ListScrollBar.offsetTop - 15; if (B < 0) return } else { B = $.ListScrollBar.offsetTop + 15; if (B + $.ListScrollBar.offsetHeight > $.musicList.offsetHeight) return } $.ListScrollBar.style.top = B + "px"; $.ListScrollBar.onDrag(0, B) } }, uiTimeFormat: function ($) { $ /= 1000; return (parseInt($ / 60) + ":" + parseInt($ % 60)).replace(/\b(\w)\b/g, "0$1") } } }; window.MusicPlay = new _MusicPlay(); var Drag = { obj: null, init: function (A, G, F, C, H, B, D, E, _, $) { A.onmousedown = Drag.start; A.hmode = D ? false : true; A.vmode = E ? false : true; A.root = G && G != null ? G : A; if (A.hmode && isNaN(parseInt(A.root.style.left))) A.root.style.left = "0px"; if (A.vmode && isNaN(parseInt(A.root.style.top))) A.root.style.top = "0px"; if (!A.hmode && isNaN(parseInt(A.root.style.right))) A.root.style.right = "0px"; if (!A.vmode && isNaN(parseInt(A.root.style.bottom))) A.root.style.bottom = "0px"; A.minX = typeof F != "undefined" ? F : null; A.minY = typeof H != "undefined" ? H : null; A.maxX = typeof C != "undefined" ? C : null; A.maxY = typeof B != "undefined" ? B : null; A.xMapper = _ ? _ : null; A.yMapper = $ ? $ : null; A.root.onDragStart = new Function(); A.root.onDragEnd = new Function(); A.root.onDrag = new Function() }, start: function ($) { var _ = Drag.obj = this; $ = Drag.fixE($); var A = parseInt(_.vmode ? _.root.style.top : _.root.style.bottom), B = parseInt(_.hmode ? _.root.style.left : _.root.style.right); _.root.onDragStart(B, A); _.lastMouseX = $.clientX; _.lastMouseY = $.clientY; if (_.hmode) { if (_.minX != null) _.minMouseX = $.clientX - B + _.minX; if (_.maxX != null) _.maxMouseX = _.minMouseX + _.maxX - _.minX } else { if (_.minX != null) _.maxMouseX = -_.minX + $.clientX + B; if (_.maxX != null) _.minMouseX = -_.maxX + $.clientX + B } if (_.vmode) { if (_.minY != null) _.minMouseY = $.clientY - A + _.minY; if (_.maxY != null) _.maxMouseY = _.minMouseY + _.maxY - _.minY } else { if (_.minY != null) _.maxMouseY = -_.minY + $.clientY + A; if (_.maxY != null) _.minMouseY = -_.maxY + $.clientY + A } document.onmousemove = Drag.drag; document.onmouseup = Drag.end; return false }, drag: function (_) { _ = Drag.fixE(_); var B = Drag.obj, A = _.clientY, $ = _.clientX, E = parseInt(B.vmode ? B.root.style.top : B.root.style.bottom), F = parseInt(B.hmode ? B.root.style.left : B.root.style.right), D, C; if (B.minX != null) $ = B.hmode ? Math.max($, B.minMouseX) : Math.min($, B.maxMouseX); if (B.maxX != null) $ = B.hmode ? Math.min($, B.maxMouseX) : Math.max($, B.minMouseX); if (B.minY != null) A = B.vmode ? Math.max(A, B.minMouseY) : Math.min(A, B.maxMouseY); if (B.maxY != null) A = B.vmode ? Math.min(A, B.maxMouseY) : Math.max(A, B.minMouseY); D = F + (($ - B.lastMouseX) * (B.hmode ? 1 : -1)); C = E + ((A - B.lastMouseY) * (B.vmode ? 1 : -1)); if (B.xMapper) D = B.xMapper(E); else if (B.yMapper) C = B.yMapper(F); Drag.obj.root.style[B.hmode ? "left" : "right"] = D + "px"; Drag.obj.root.style[B.vmode ? "top" : "bottom"] = C + "px"; Drag.obj.lastMouseX = $; Drag.obj.lastMouseY = A; Drag.obj.root.onDrag(D, C); return false }, end: function () { document.onmousemove = null; document.onmouseup = null; Drag.obj.root.onDragEnd(parseInt(Drag.obj.root.style[Drag.obj.hmode ? "left" : "right"]), parseInt(Drag.obj.root.style[Drag.obj.vmode ? "top" : "bottom"])); Drag.obj = null }, fixE: function ($) { if (typeof $ == "undefined") $ = window.event; if (typeof $.layerX == "undefined") $.layerX = $.offsetX; if (typeof $.layerY == "undefined") $.layerY = $.offsetY; return $ } }