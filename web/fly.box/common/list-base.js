!function () { window.indexPath = "../"; var _ = fly, $ = decodeURI(unescape(location.search)); _.base.getUserContext(null, false); var A = _.base.pageContext = { module: _.getQuery("m", $), listPage: _.getQuery("list", $) || "list", pageHtml: ['<div id=top-empty></div><div id="title-block">{title}</div>', '<div id="toolbar" class="nolink"></div> ', '<div id="list-container" class="nolink a-button"><div class=list-loading ></div>', "</div>"].join("") }; fly.base.ListBase = _.Class({ constructor: function () { this.listeners && this.on(this.listeners); this.onInit() }, onInit: _.Event.createEventFn("init"), onBeforeCreateStore: _.Event.createEventFn("beforecreatesotre"), onBeforeCreatePager: _.Event.createEventFn("beforecreatepager"), onBeforeCreateGrid: _.Event.createEventFn("beforecreategrid"), autoRenderGrid: true, refresh: function () { this.pager.refresh() }, removeCallback: function ($) { if ($.msg) _.alert($.msg); if ($.success) this.refresh() }, module: A.module, service: A.module, buttons: ["add", "edit", "remove"], pageFormat: A.pageHtml, listHeightFit: false, removeHint: "\u786e\u5b9a\u8981\u5220\u9664\u5417\uff1f   {0}", removeHintCount: 1, commandColButtons: ["edit", "remove"], commandColRenderer: function ($) { $ = $ || this.commandColButtons; for (var B = 0; B < $.length; B++) $[B] = _.common.list.rowCommands[$[B]] || $[B]; var A = $.join(" &nbsp; "); return function ($, _) { return A.format(_.record) } }, remove: function ($) { var C = $ ? (_.likeArray($) ? $ : [$]) : this.grid.getSelectionIds(_.base.lang.noSelected.format("\u5220\u9664")); if (!C.length) return false; var D = this, E = 0, A = function () { var $ = { ids: _.likeArray(C) ? C.join(",") : C }; if (C.length == 1) $.id = C[0]; _.post(_.base.ajaxUrl(D.service, "delete", "{$.ifFun(page.getBaseParams,page)}".format(D)), $, D.removeCallback.bind(D)) }, B = function () { _.confirm(D.removeHint.format(_.likeArray(C) ? C.length : 1), function () { E++; if (E >= D.removeHintCount) A(); else B() }) }; if (this.removeHintCount) B(); else A() }, pageUrl: function () { return _.base.ajaxUrl(this.service, "PageData", "{$.ifFun(page.getBaseParams,page)}".format(this)) }, defaultStoreArgs: {}, createStore: function ($) { $ = _.extendIf($, { url: _.ifFun(this.pageUrl, this) }, { params: this.defaultStoreArgs }); this.onBeforeCreateStore.fire(this, $); this.store = _.common.createStore($) }, createPager: function ($) { $ = _.extend({}, this.pagerConfig, $); this.onBeforeCreatePager.fire(this, $); this.pager = _.common.createPager($) }, createGrid: function ($) { $ = _.extend({ store: this.store, bbar: this.pager, rowHeight: 45 }, _.ifFun(this.gridConfig, this), $); if (this.listHeightFit && !$.height) $.height = "100%"; this.onBeforeCreateGrid.fire(this, $); this.grid = new _.ui.grid.GridPanel($); var A = this; this.grid.onAfterBind(function () { if (A.pager.pageCount > 1) _.getBody().addClass("f-more-page") }); window.search = function ($) { A.store.params.key = $; A.pager.go(0, true) }; this.autoRenderGrid && this.grid.render(this.listContainer) }, add: function () { location.href = "form.htm?m={module}&form={form}&{$.ifFun(page.getBaseParams,page)}".format(this) }, edit: function ($) { if (!$) $ = this.grid.getSelectionIds(_.base.lang.noSelected.format("\u7f16\u8f91"), _.base.lang.selectedMore.format("\u7f16\u8f91"))[0]; if ($) location.href = "form.htm?m={0}&form={form}&id={1}&{$.ifFun(page.getBaseParams,page)}".format(this.module, $); return false }, initEvents: function () { this.editButton.click(function () { return this.edit() }, this); this.deleteButton.click(function () { return this.remove() }, this) }, createTopBar: function ($) { if (!this.toolbar || !this.toolbar.length) return; var A = this.toolbar; $ = $ || this.buttons; $ && $.each(function (B, D) { if (_.isStr(B)) { if (B == "->") { var C = _("<span class=right-block ></span>"); A.append(C); A = C; return } $[D] = B = _.common.list.tools[B] || B } if (_.isStr(B)) $[D] = B = B.format(this); A.append(B) }, this) }, createBody: function () { if (this.pageFormat) if (_.isFun(this.pageFormat)) this.pageFormat(); else { var $ = this.pageFormat.format(this); _.getBody().append($) } this.toolbar = _("#toolbar"); this.listContainer = _("#list-container"); this.leftContainer = _("#left-container"); this.rightContainer = _("#right-container"); this.editButton = _("#btn-edit"); this.deleteButton = _("#btn-delete"); this.listLoading || (this.listLoading = { box: _(".list-loading")[0], css: "f-loading" }); if (this.listHeightFit) { _.doc.css("overflow-y", "hidden"); _.getBody().on("sizechange", this.bodySizeChange.bind(this)); setTimeout(this.bodySizeChange.bind(this), 50) } }, bodySizeChange: function () { if (this.listHeightFit) { var $ = _.getBody().rect().height - this.listContainer.offset().top; this.listContainer.height($); this.leftContainer.height($); this.rightContainer.height($) } }, onAfterShow: _.Event.createEventFn("aftershow"), createMembers: function () { if (!this.title) this.title = this.name || "\u7ba1\u7406"; this.createBody(); this.createTopBar(); this.createLeftContent && this.createLeftContent(); this.createStore(); this.createPager(); this.createGrid() }, show: function () { this.createMembers(); this.initEvents(); this.onAfterShow() } }); if (A.module) _.loadScript(("../{module}/{listPage}.js?" + _.pathPart).format(A)) } ()