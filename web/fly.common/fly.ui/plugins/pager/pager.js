fly.regPlugin("pager", function (A) { var $ = A.ui, _ = A.Event, B = "first,previous,next,last,refresh"; $.Pager = A.Class({ base: $.Toolbar, overrides: $.IControlPlugin, constructor: function () { arguments.callee.$base.apply(this, arguments); this.onRender(this.updateState); this.onJoin(this.joinControl); this.currentTypeBuilder = $.Pager.currentTypeBuilder[this.currentType]; (!this.items || !this.items.length) && (this.items = this.currentTypeBuilder.items); this.css = (this.css || "") + " " + this.baseCss + "-" + this.currentType }, initCss: function () { this.css = (this.css || "") + " f-toolbar"; this.$base.initCss.apply(this, arguments) }, baseCss: "f-pager", hiddenOnOnePage: false, showButtonText: false, showButtonIcon: true, pageIndex: 1, pageCount: 0, start: 0, end: 0, total: 0, pageSize: 35, currentType: "input", pageListCount: 7, onPage: _.createEventFn("page"), onStateChange: _.createEventFn("statechange"), go: function ($, _) { if ($ != null) { $ = $ == "first" ? 1 : ($ == "previous" ? this.pageIndex - 1 : ($ == "next" ? this.pageIndex + 1 : ($ == "last" ? this.pageCount : $))); $ == "refresh" || ($ = Math.max(Math.min($, this.pageCount), 1)) } var A = $ != this.pageIndex; $ != "refresh" && $ != null && (this.pageIndex = $); this.pageIndex > this.pageCount && (this.pageIndex = this.pageCount); this.start = (this.pageIndex - 1) * this.pageSize; this.end = Math.min(this.total - 1, this.start + this.pageSize - 1); this.requestOption = { pageIndex: this.pageIndex, pageSize: this.pageSize, start: this.start, limit: this.pageSize }; if ((_ == true || A) && _ != false) this.fire("page", this, this.requestOption); this.updateState(_) }, refresh: function () { this.go("refresh") }, infoFormat: "Displaying topics {start+1}-{end+1} of {total}", itemBuilders: { current: function () { return this.currentTypeBuilder.current.call(this) }, info: function () { if (this.showInfo == false) return null; this.infoBox = new $.HtmlNode({ css: this.baseCss + "-info" }); this.on("statechange", function () { this.infoBox.el.html(this.infoFormat.format(this)) }); return this.infoBox } }, parseItem: function (E) { var F = E; if (A.isStr(E)) { var _ = E.firstUpper(); if (this["show" + _] == false) return null; if (B.contains(E)) { var C = this.showButtonText ? $.Pager.buttonNames[E] || _ : null, G = function () { this.go(F) } .bind(this); if (this.showButtonIcon) E = new A.ui.BaseButton({ iconCss: "f-btn-" + E, text: C, handler: G }); else E = new A.ui.SimpleButton({ text: C, handler: G }); this[F + "Button"] = E } else { var D = this.itemBuilders[E]; E = D ? D.call(this) : E.format(this) } } return this.$base.parseItem.apply(this, arguments) }, updateState: function ($) { if (this.pageSize < 0) throw new Error("PageSize not set"); this.pageCount = Math.ceil(this.total / this.pageSize); this.firstButton && this.firstButton.disable(this.pageIndex == 1); this.previousButton && this.previousButton.disable(this.pageIndex == 1); this.nextButton && this.nextButton.disable(this.pageIndex == this.pageCount); this.lastButton && this.lastButton.disable(this.pageIndex == this.pageCount); this.pageCountBoxs = this.el.$("." + this.baseCss + "-pageCount"); this.pageCountBoxs.text(this.pageCount); $ != false && this.fire("statechange"); if (this.hiddenOnOnePage) this.pageCount < 2 ? this.hide() : this.show() }, syncState: function ($) { if (!$) return; this.total = $.total; this.start = $.start; this.end = $.end; if (this.pageSize < 0) this.pageSize = $.pageSize; else $.pageSize = this.pageSize; this.updateState() }, checkOption: function ($) { A.extendIf($, { pageIndex: 1, pageSize: this.pageSize, start: 0, limit: this.pageSize }) }, joinControl: function ($) { $.store.onGetRecords(function (A, _) { if ($.nodeId != (_ || {}).nodeId) return; this.syncState(A) }, this); $.onPreBind(this.checkOption, this); this.onPage(function ($) { this.ownerControl.bind($) }, this); this.syncState(); $.pager = this } }); $.Pager.currentTypes = { input: "input", pageList: "pageList" }; $.Pager.currentTypeBuilder = { input: { items: ["first", "previous", "|", { text: "  Page  ", ctype: "htmlnode", css: "gray" }, "current", "<span class=gray > &nbsp;of&nbsp; <span class={baseCss}-pageCount ></span></span>&nbsp;", "|", "next", "last", "refresh", "->", "info"], current: function () { var _ = new $.Element("<input class=" + this.baseCss + "-current-input />"); _.focus("this.select()"); _.keypress(function () { $event.keyCode == 13 && this.blur() }); _.change(function () { var $ = $event.target.value.replace(/\s/g, ""); if ($.match(/[^\d]/)) { $event.target.value = this.pageIndex; return } this.go($) }, this); this.on("statechange", function () { _.val(this.pageIndex) }); return _ } }, pageList: { items: ["first", "previous", "current", "next", "last", "refresh", "->", "info"], current: function () { var C = "<a></a>".repeat(this.pageListCount), B = new $.Element("<div class=" + this.baseCss + "-current-pageList >" + C + "</div>"), _ = B.$("a"); B.click(function () { if ($event.target.nodeName != "A") return false; this.go($event.target.pageIndex); return false }, this); this.on("statechange", function () { var D = this, C = this.baseCss + "-current"; B.current && B.current.removeClass(C); var $ = this.pageIndex + 1 - Math.ceil(this.pageListCount / 2); $ < 1 && ($ = 1); ($ + this.pageListCount > this.pageCount) && ($ = Math.max(this.pageCount - this.pageListCount + 1, 1)); _.each(function (_, F) { var E = $ + F; _.style.display = E > D.pageCount ? "none" : ""; _.pageIndex = _.innerText = E; E == D.pageIndex && (B.current = A(_).addClass(C)) }) }); return B } } }; $.Pager.buttonNames = {} })