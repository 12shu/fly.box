var _hasFly = window.fly && window.fly.version, __dragLayout = function (_) { _.ui = _.ui || {}; var $ = 0; function B($) { var A = { top: $.offsetTop, left: $.offsetLeft, width: $.offsetWidth, height: $.offsetHeight }, _ = $.getBoundingClientRect ? $.getBoundingClientRect() : ($.getClientRects ? $.getClientRects() : null); if (_) { A.top = _.top; A.left = _.left; return A } while ($ = $.offsetParent) { A.top += $.offsetTop; A.left += $.offsetLeft } return A } function A(_, $) { var A = B(_); if ($.clientX > A.left && $.clientX < (A.left + A.width) && $.clientY > A.top && $.clientY < (A.top + A.height)) { if ($.clientY < (A.top + A.height / 2)) return 1; else return 2 } else return 0 } _.extend(_, { dragLayout: function ($) { return new _.ui.DragLayout($) } }); _.ui.DragLayoutItem = function (A, C) { var D = this; this.$dom = _(A); this.dom = this.$dom[0]; this.dom.ownerClass = this; this.ownerClass = C; this.closeButton = this.$dom.$(C.config.closeSelector); this.toggleButton = this.$dom.$(C.config.toggleSelector); this.content = this.$dom.$(C.config.contentSelector); this.header = this.$dom.$(C.config.headerSelector); C.items.push(this); D.config = D.ownerClass.config; this.close = function () { if (_hasFly && D.ownerClass.fire("onCloseItem", null, D) == false) return false; D._oldParent = D.dom.parentNode; if (D.dom.parentNode) D.dom.parentNode.removeChild(D.dom) }; this.show = function () { if (_hasFly && D.ownerClass.fire("onShowItem", null, D) == false) return false; D.$dom.show(); if (D.dom.contains ? !D.ownerClass.container[0].contains(D.dom) : !(D.ownerClass.container[0].compareDocumentPosition(D.dom) & 16)) D.ownerClass.addItem(D, D._oldParent) }; this.hide = function () { if (_hasFly && D.ownerClass.fire("onHideItem", null, D) == false) return false; D.$dom.hide() }; this.toggle = function () { D.$dom.hasClass(D.config.collapseCss) ? D.extend() : D.collapse() }; this.collapse = function () { if (_hasFly && D.ownerClass.fire("onCollapseItem", null, D) == false) return false; D.$dom.addClass(D.config.collapseCss); D.content.hide() }; this.extend = function ($) { if (_hasFly && D.ownerClass.fire("onExtendItem", null, D) == false) return false; D.$dom.removeClass(D.config.collapseCss); D.content.show() }; this._mouseDown = function (C) { var F = D.ownerClass.context; if (F.dragingItem != null) return false; if (_hasFly && D.ownerClass.fire("onMoveStart", null, D) == false) return false; var A = C.clientX, E = C.clientY; $ = window.setTimeout(function () { F.dragingItem = D; F.dragingItem.$dom.addClass(D.config.dragingCss); D.ownerClass.places = D.ownerClass.container.$(D.config.placeSelector); F.startInfo = B(F.dragingItem.dom); F.startInfo.x = A; F.startInfo.y = E; F.oldPosition = F.dragingItem.dom.style.position; F.oldWidth = F.dragingItem.dom.style.width; F.dragingItem.$dom.css({ width: F.startInfo.width, left: A - F.startInfo.x, top: E - F.startInfo.y, position: "absolute", zIndex: 1000000 }); var $ = _('<div class="' + D.config.tempItemCss + '" ></div>'); F.tempBox = $; $.height(F.dragingItem.$dom.height()); F.dragingItem.$dom.before($) }, 200); return false } }; _.extend(_.ui.DragLayoutItem.prototype, { initEvent: function () { if (this.initEvented) return; this.initEvented = true; this.header.mousedown(this._mouseDown); this.closeButton.click(this.close); this.toggleButton.click(this.toggle) } }); _.ui.DragLayout = function (A) { var B = this; this.config = _.extend({}, _.ui.DragLayout.DefaultConfig, A); this.context = {}; this.items = []; this.itemMap = {}; this.container = _(B.config.container); this._mouseUp = function () { window.clearTimeout($); if (B.context.dragingItem != null) { B.context.dragingItem.$dom.css("position", B.context.oldPosition || "static"); B.context.dragingItem.$dom.removeClass("f-dl-draging").css({ width: B.context.oldWidth || "", left: "", top: "", position: "static", zIndex: B.context.oldZIndex || 0 }); B.context.tempBox.before(B.context.dragingItem.$dom).remove(); B.context = {} } }; this._mouseMove = function ($) { var _ = B.context; if (_.dragingItem != null) { _.dragingItem.$dom.css({ left: $.clientX - _.startInfo.x + _.startInfo.left, top: $.clientY - _.startInfo.y + _.startInfo.top }); B.moveTempBox($) } }; _(document).mousemove(this._mouseMove).mouseup(this._mouseUp).bind("selectstart", function () { return false }); this.container.$(B.config.itemSelector).each(function () { B.addItem(this) }) }; _.ui.DragLayout.DefaultConfig = { container: document, headerSelector: ".f-dl-header", contentSelector: ".f-dl-content", itemSelector: ".f-dl-item", placeSelector: ".f-dl-place", closeSelector: ".f-dl-close", toggleSelector: ".f-dl-toggle", tempItemCss: "f-dl-item-temp", collapseCss: "f-dl-collapse", dragingCss: "f-dl-draging" }; if (window.fly && window.fly.version) fly.Event.registEvent(_.ui.DragLayout, ["onMovingTo", "onMoveStart", "onCloseItem", "onExtendItem", "onCollapseItem", "onHideItem", "onShowItem"]); _.extend(_.ui.DragLayout.prototype, { findItem: function ($, A) { if ($ instanceof _.ui.DragLayoutItem) return $; if ($.ownerClass instanceof _.ui.DragLayoutItem) return $.ownerClass; $ = _($); if ($[0] && $[0].ownerClass instanceof _.ui.DragLayoutItem) return $[0].ownerClass; else if (A) return new _.ui.DragLayoutItem($, this); else return null }, addItem: function (A, B) { A = this.findItem(A, true); A.initEvent(); if (B) { var $ = typeof B == "string" ? this.container.$(B) : _(B); if ($[0] && $[0] != A.dom.parentNode) $[0].appendChild(A.dom) } else if (A.dom.parentNode == null) this.container.append(A.$dom) }, movingTo: function (A, $, B) { if (_hasFly && this.fire("onMovingTo", null, A, $, B) == false) return false; if ($) $.$dom[B == "up" ? "before" : "after"](this.context.tempBox); else _(A).append(this.context.tempBox) }, moveTempBox: function ($) { var E = this, D = this.context, C = false; _.each(this.items, function () { if (this == D.dragingItem) return; var _ = A(this.dom, $); if (_ == 0) return; E.movingTo(this.dom.parentNode, this, _ == 1 ? "up" : "down"); C = true }); if (C) return; this.places.each(function () { if (C) return; var H = B(this); if ($.clientX < H.left || $.clientX > H.left + H.width) return; if (this.children.length > 1 || (this.children.length == 1 && this != D.dragingItem.dom.parentNode)) { var A = B(this.children[this.children.length - 1]); if (($.clientY < A.top + A.height)) return; var G; for (var F = this.children.length - 1; F > -1; F--) if (this.children[F].ownerClass instanceof _.ui.DragLayoutItem) { G = this.children[F].ownerClass; break } E.movingTo(this, G, G ? "down" : null) } else { C = true; E.movingTo(this, null, null) } }) } }) }; if (_hasFly) __dragLayout(fly)