fly.regPlugin("selection", function () { var B = fly, $ = B.ui, _ = B.Event, C = B.collection, A = $.DomHelper; $.SelectionModel = B.Class({ constructor: function (_) { _ && B.extend(this, _); if (!this.sortBy) { var $ = this.selectedProperty; this.sortBy = function (A, _) { var C = A[$], B = _[$]; C = C === undefined ? null : C; B = B === undefined ? null : B; return C == B ? 1 : C > B ? 1 : -1 } } }, selectContainer: null, itemsProperty: "items", selectedCss: "f-selected", selectedProperty: "selected", elName: "el", singleSelect: false, compare: function ($) { return $[this.selectedProperty] == true }, selectedItems: [], getItems: function () { return this.items || this.control[this.itemsProperty] }, getById: function ($) { return this.getItems().dataMap[$] }, getRange: function (_, $) { var B = this.getItems(), C = B.indexOf(_), A = B.indexOf($); return Array.prototype.slice.call(B, Math.min(C, A), Math.max(C, A) + 1) }, getItem: function ($) { return this.getItems()[$] }, isItem: function ($) { return B.isNumber($) ? this.getItem($) : $ }, getSelections: function (C, _, $) { var A = this.getItems().$where("this['" + this.selectedProperty + "']" + ($ == null ? "" : ("==" + $))); if (C && !A.length) { B.isFun(C) ? C.call(this) : alert(C); return [] } if (_ && A.length > 1) { B.isFun(_) ? _.call(this) : alert(_); return [] } return A }, isSelected: function ($) { var _ = this.isItem($); return _[this.selectedProperty] ? _ : undefined }, selectAll: function ($) { $ = $ == null || !!$; var A = this.getItems(); for (var B = 0, _ = A.length; B < _; B++) this.select(A[B], $); this.onSelectionChange(); return this }, toggleAll: function () { var _ = this.getItems(); for (var A = 0, $ = _.length; A < $; A++) this.toggleState(_[A]); this.onSelectionChange(); return this }, clearSelections: function ($) { var A = this.singleSelect ? (this.lastSelectedItem ? [this.lastSelectedItem] : []) : this.getItems(); if (!A) return this; for (var B = 0, _ = A.length; B < _; B++) if (!$ || $ != A[B]) this.select(A[B], false, true, false); this.onSelectionChange(); return this }, setState: function (_, $) { A[$ ? "addClass" : "removeClass"](_[this.elName] || _, this.selectedCss); if ($) this.lastSelectedItem = _; else if (this.lastSelectedItem == _) this.lastSelectedItem = null; _[this.selectedProperty] = $; _.checkbox && ((_.checkbox.dom || _.checkbox).checked = $); return this }, toggleState: function ($, A, _) { return this.select($, !$[this.selectedProperty], A, _) }, lastSelectedItem: null, select: function (_, $, C, B) { var A = this.isItem(_); if ($ == null) $ = true; if (C === false || ($ && this.singleSelect)) this.clearSelections(A); if ($ == !!this.isSelected(A)) return; if (B != false && this.onBeforeSelect(this, A, $) === false) return; this.setState(A, $); if (B !== false) this.onSelectionChange(); return this }, onSelectionChange: _.createEventFn("selectionchange"), onBeforeSelect: _.createEventFn("beforeselect"), itemEventFire: function (_, D) { var B = this.lastSelectedItem; if ($event.shiftKey && B) { this.clearSelections(); var $ = this.getRange(B, _); for (var C = 0; C < $.length; C++) this.select($[C], true, true); this.lastSelectedItem = B } else this.toggleState(_, D == true || $event.ctrlKey); if ($event.ctrlKey || $event.shiftKey) A.unSelection() }, join: function ($) { this.control = $; this.joined = true; this.bindEvents() }, canToggleByItem: true, toggleByItemEvents: "click", getOwnerItemId: function ($) { throw "unfulfilled" }, toggleIsKeep: function ($, _) { return false }, beforeToggle: function ($) { return true }, toggleByItemHandler: function () { var $ = this.getOwnerItemId($event.target); if ($ == null) return; var _ = this.getById($); _ != null && this.beforeToggle($event.target, _) && this.itemEventFire(_, this.toggleIsKeep($event.target, _)) }, bindEvents: function () { var _ = this.getOwnerControl(), B = this, $ = function () { _ = _.body || A.getOuter(_); this.canToggleByItem && this.supperToggleByItem(_); this.canSelectByDrag && this.supperSelectByDrag(_) } .bind(this); (_.rendered || !_.onRender) ? $() : _.onRender($) }, getOwnerControl: function () { if (this.control.isPlugin && this.control.ownerControl) return this.control.ownerControl; else return (B.isString(this.selectContainer) ? this.control[this.selectContainer] : this.selectContainer) || this.control }, supperToggleByItem: function ($) { _.on($, this.toggleByItemEvents, this.toggleByItemHandler, this) }, canSelectByDrag: true, dragClearSelection: false, supperSelectByDrag: function (D) { var F = this; function G(B) { var _ = F.getOwnerItemId($event.target); if (_ == null) return; var E = F.getById(_); if (E == null || B === true) return E; if (F.canSelectBrag === false) return; var A = F.getRange($, E), G = {}; for (var I = 0; I < A.length; I++) { var D = A[I]; G[D.id] = D; if (D._oldSelected == null) C[D.id] = D; F.select(D.item || D, true, true) } for (var H in C) if (!(H in G)) F.select(C[H], C[H]._oldSelected == true, true) } function _() { D.un("mouseover", G); B.doc.un("mouseup", _); $ = null; for (var A in C) C[A]._oldSelected = null; C = {}; H = 0 } var $, C = {}, I = 0, E = 0, H; D.on("selectstart", function () { if (H || $event.target.isTextEdit) return; if (F.dragClearSelection ^ $event.ctrlKey) A.unSelection(); C = {}; if ($ = G(true)) { D.on("mouseover", G); B.doc.on("mouseup", _); H = 1 } }) } }) })