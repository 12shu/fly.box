fly.regPlugin("combo", function () { var $ = fly; ui = $.ui; $.ui.Combo = $.Class({ base: ui.Panel, wrap: null, constructor: function ($) { var _ = this; arguments.callee.$base.apply(this, arguments); this.items = $ ? $.items : null, this.createMembers(); this.bindEvents(); this.selectDefault() }, items: null, baseCss: "f-combo", domFrame: ["wrap", "pad"], textFormat: "{text}", itemFormat: '<div f-id="{id}" class="f-combo-item">{text}</div>', padFormat: '<div class="f-combo-pad"></div>', padWidth: "100%", hideOnClickPad: true, onBeforeCreatePad: $.Event.createEventFn("beforecreatepad"), showPadRefer: "textBox", createPad: function () { if (this.padCreated) return; this.onBeforeCreatePad(); if (!this.pad) { this.pad = $(this.padFormat); var _ = this.pad.filter(".f-combo-pad"); _.length || (_ = this.pad.$(".f-combo-pad")); _.length || (_ = this.pad); _.empty() } else { this.pad = $(this.pad); this.pad.addClass("f-combo-pad") } if (this.content) this.pad.append(this.content); else if (this.items) { this.itemMap = {}; this.items.each(function (B, C) { var A = $.isDom(B) ? B : ($.isDom(B.text) ? B.text : $(this.itemFormat.format(B))); this.itemMap[B.id] = A; _.append(A) }, this) } this.pad.appendTo(document.body) }, showPad: function () { this.createPad(); var A = this[this.showPadRefer].rect(); if (this.padWidth) this.pad.width(/%/.test(this.padWidth) ? A.width * parseFloat(this.padWidth) / 100 - 2 : this.padWidth); if (this.padHeight) this.pad.height(this.padHeight); var B = A.top + A.height + document.documentElement.scrollTop, $ = A.left + document.documentElement.scrollLeft; this.pad.show(); var _ = this.pad.offset().width; if (A.width > _) $ += (A.width - _) / 2; this.pad.css({ left: $, top: B, display: "block" }) }, selectItem: function (_) { var $ = this.textFormat.format(_); if (this.textBox[0].nodeName == "INPUT") this.textBox.value($); else this.textBox.html($); this.selectedItem = _; this.selectedValue = _.id; this.hidden && this.hidden.value(_.id) }, selectDefault: function () { var A = this, $ = A.selectedItem; if (!$ && A.items) { var _ = A.selectedValue || this.hidden.value(); if (_) $ = A.items.first(function ($) { return $.id == _ }); $ = $ || this.items.first() } $ && this.selectItem($) }, createMembers: function () { var A = this; this.wrap = $(this.wrap || this.selector || ("#" + this.id)); if (!this.wrap[0]) throw "wrap \u5c5e\u6027\u4e3a\u7a7a"; this.wrap.comboBox = this; this.textBox = this.wrap.$(".f-combo-text"); this.textBox[0] || (this.textBox = this.wrap.filter("input")); this.textBox[0] || (this.textBox = this.wrap.$("input")); this.textBox.addClass("f-combo-text"); this.arrow = this.wrap.$(".f-combo-arrow"); var _ = this.hiddenName || this.wrap.attr("hidden"); if (_) { this.hidden = $(this.textBox[0].form[_]); if (!this.hidden[0]) this.hidden = $('<input type=hidden name="{0}" />'.format(_)).insertAfter(this.wrap) } else this.hidden = this.wrap.$("input:hidden") }, bindEvents: function () { var _ = this; $.doc.click(function () { var B = $($event.target), A = B.closest(".f-combo-item"); if (A.length) { _.value(A.attr("f-id")); setTimeout(function () { _.pad.hide() }, 60) } else if (_.wrap[0] == B[0] || $.DomHelper.contains(_.wrap[0], B[0])) _.showPad(); else if (_.pad) { if (!_.hideOnClickPad && (_.pad[0] == B[0] || $.DomHelper.contains(_.pad[0], B[0]))) return; _.pad.hide() } }) }, text: function ($) { if (arguments.length) { this.textBox.value($); return this } else return this.textBox.html() }, value: function ($) { if (arguments.length) { var _ = this.items.first(function (_) { return _.id == $ }); if (!_) throw "not find item:" + $; this.selectItem(_); return this } else return this.selectedValue } }); $.Component.Mgr.regType("combo", $.ui.Combo) }); fly.regPlugin("combotree", function () { var $ = fly; ui = $.ui; $.ui.ComboTree = $.Class({ base: $.ui.Combo, constructor: function ($) { var _ = this; arguments.callee.$base.apply(this, arguments); this.onBeforeCreatePad(this.showTree, this) }, checkTree: function ($) { $() }, createTree: function (_) { var A = this; this.checkTree(function () { fly.mini.ajax = $.ajax; var B = A.tree.selectionMode == fly.mini.selectionMode.multi, C = { leastSelectionOne: !B, onSelect: function (_, $) { if (B) { clearTimeout(A.changeHandler); A.changeHandler = setTimeout(function () { var $ = A.tree.getSelectItems(); A.text($.select("o=>o.text").join(",")); A.value($.select("o=>o.id").join(",")) }, 10); return false } else if ($ && _.selected) A.selectItem(_) } }; if (B) { C.checkMode = fly.mini.checkMode.multi; C.keepCheckAndSelectSync = true; A.hideOnClickPad = false } A.tree = new fly.mini.Tree($.extendIf(A.tree, C)); _() }) }, showTree: function () { var _ = this, A = true; try { A = !(this.tree instanceof fly.mini.Tree) } catch ($) { } if (!this.pad || A) if (A) this.createTree(function () { if (_.pad) _.tree.render(_.pad[0]); else { _.tree.render(document.body); _.pad = _.tree.root.wrap } if (_.onCreateTree) _.onCreateTree(_.tree) }); else this.pad = this.tree.root.wrap }, value: function ($) { if (arguments.length) { this.hidden.value($); return this } else return this.hidden.value() } }); $.Component.Mgr.regType("combotree", $.ui.ComboTree) })