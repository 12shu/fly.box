var ZeroClipboard = { version: "1.0.7", clients: {}, moviePath: "ZeroClipboard.swf", nextId: 1, $: function ($) { if (typeof ($) == "string") $ = document.getElementById($); if (!$.addClass) { $.hide = function () { this.style.display = "none" }; $.show = function () { this.style.display = "" }; $.addClass = function ($) { this.removeClass($); this.className += " " + $ }; $.removeClass = function (A) { var $ = this.className.split(/\s+/), _ = -1; for (var B = 0; B < $.length; B++) if ($[B] == A) { _ = B; B = $.length } if (_ > -1) { $.splice(_, 1); this.className = $.join(" ") } return this }; $.hasClass = function ($) { return !!this.className.match(new RegExp("\\s*" + $ + "\\s*")) } } return $ }, setMoviePath: function ($) { this.moviePath = $ }, dispatch: function ($, B, A) { var _ = this.clients[$]; if (_) _.receiveEvent(B, A) }, register: function ($, _) { this.clients[$] = _ }, getDOMObjectPosition: function (_, $) { var A = { left: 0, top: 0, width: _.width ? _.width : _.offsetWidth, height: _.height ? _.height : _.offsetHeight }; while (_ && (_ != $)) { A.left += _.offsetLeft; A.top += _.offsetTop; _ = _.offsetParent } return A }, Client: function ($) { this.handlers = {}; this.id = ZeroClipboard.nextId++; this.movieId = "ZeroClipboardMovie_" + this.id; ZeroClipboard.register(this.id, this); if ($) this.glue($) } }; ZeroClipboard.Client.prototype = { id: 0, ready: false, movie: null, clipText: "", handCursorEnabled: true, cssEffects: true, handlers: null, glue: function (_, $, C) { this.domElement = ZeroClipboard.$(_); var A = 99; if (this.domElement.style.zIndex) A = parseInt(this.domElement.style.zIndex, 10) + 1; if (typeof ($) == "string") $ = ZeroClipboard.$($); else if (typeof ($) == "undefined") $ = document.getElementsByTagName("body")[0]; var D = ZeroClipboard.getDOMObjectPosition(this.domElement, $); this.div = document.createElement("div"); var B = this.div.style; B.position = "absolute"; B.left = "" + D.left + "px"; B.top = "" + D.top + "px"; B.width = "" + D.width + "px"; B.height = "" + D.height + "px"; B.zIndex = A; if (typeof (C) == "object") for (addedStyle in C) B[addedStyle] = C[addedStyle]; $.appendChild(this.div); this.div.innerHTML = this.getHTML(D.width, D.height) }, getHTML: function (B, _) { var C = "", A = "id=" + this.id + "&width=" + B + "&height=" + _; if (navigator.userAgent.match(/MSIE/)) { var $ = location.href.match(/^https/i) ? "https://" : "http://"; C += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="' + $ + 'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="' + B + '" height="' + _ + '" id="' + this.movieId + '" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="' + ZeroClipboard.moviePath + '" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="' + A + '"/><param name="wmode" value="transparent"/></object>' } else C += '<embed id="' + this.movieId + '" src="' + ZeroClipboard.moviePath + '" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="' + B + '" height="' + _ + '" name="' + this.movieId + '" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="' + A + '" wmode="transparent" />'; return C }, hide: function () { if (this.div) this.div.style.left = "-2000px" }, show: function () { this.reposition() }, destroy: function () { if (this.domElement && this.div) { this.hide(); this.div.innerHTML = ""; var $ = document.getElementsByTagName("body")[0]; try { $.removeChild(this.div) } catch (_) { } this.domElement = null; this.div = null } }, reposition: function ($) { if ($) { this.domElement = ZeroClipboard.$($); if (!this.domElement) this.hide() } if (this.domElement && this.div) { var A = ZeroClipboard.getDOMObjectPosition(this.domElement), _ = this.div.style; _.left = "" + A.left + "px"; _.top = "" + A.top + "px" } }, setText: function ($) { this.clipText = $; if (this.ready) this.movie.setText($) }, addEventListener: function (_, $) { _ = _.toString().toLowerCase().replace(/^on/, ""); if (!this.handlers[_]) this.handlers[_] = []; this.handlers[_].push($) }, setHandCursor: function ($) { this.handCursorEnabled = $; if (this.ready) this.movie.setHandCursor($) }, setCSSEffects: function ($) { this.cssEffects = !!$ }, receiveEvent: function (C, _) { C = C.toString().toLowerCase().replace(/^on/, ""); switch (C) { case "load": this.movie = document.getElementById(this.movieId); if (!this.movie) { var B = this; setTimeout(function () { B.receiveEvent("load", null) }, 1); return } if (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)) { B = this; setTimeout(function () { B.receiveEvent("load", null) }, 100); this.ready = true; return } this.ready = true; this.movie.setText(this.clipText); this.movie.setHandCursor(this.handCursorEnabled); break; case "mouseover": if (this.domElement && this.cssEffects) { this.domElement.addClass("hover"); if (this.recoverActive) this.domElement.addClass("active") } break; case "mouseout": if (this.domElement && this.cssEffects) { this.recoverActive = false; if (this.domElement.hasClass("active")) { this.domElement.removeClass("active"); this.recoverActive = true } this.domElement.removeClass("hover") } break; case "mousedown": if (this.domElement && this.cssEffects) this.domElement.addClass("active"); break; case "mouseup": if (this.domElement && this.cssEffects) { this.domElement.removeClass("active"); this.recoverActive = false } break } if (this.handlers[C]) for (var $ = 0, D = this.handlers[C].length; $ < D; $++) { var A = this.handlers[C][$]; if (typeof (A) == "function") A(this, _); else if ((typeof (A) == "object") && (A.length == 2)) A[0][A[1]](this, _); else if (typeof (A) == "string") window[A](this, _) } } }